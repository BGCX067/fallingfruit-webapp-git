<% if request.fullpath.include? "?"
     given_params = request.fullpath.split(/\?/)[1]
     clean_fullpath = locations_path + "?" + given_params.strip.split(/&/).collect{ |p| p =~/^center\_(lat|lng)/ ? nil : p }.compact.join("&") + "&"
   else
     clean_fullpath = locations_path + "?"
   end
%>

<div id="searchbar">
Controls:
<input id="address" name="address" value="Zoom to Address" onkeypress="if(event.keyCode == 13){ recenter_map_to_address(); }" onclick="this.value = '';" size="35">
<button onclick="recenter_map_to_address();">Go</button>
<span id="recenter_button">
or <button onclick="recenter_map()">Zoom to Me</button>
::
</span>
<input name="search" id="search" value="Filter (e.g., Apple)" onclick="this.value = '';" onkeypress="if(event.keyCode == 13){ search_filter(); }">
<button onclick="search_filter();">Go</button>
:: Labels
<button onclick="labelize_markers()">On</button> | <button onclick="delabelize_markers()">Off</button>
</div>

<%= gmaps("markers" => {"data" => @json, "options" => {"do_clustering" => true, "clusterer_maxZoom" => 11, "clusterer_gridSize" => 75}}) %>

 <% content_for :scripts do %>
    <script type="text/javascript" charset="utf-8">
        function recenter_map(){
          navigator.geolocation.getCurrentPosition(function(position){
              var lat = position.coords.latitude;
              var lon = position.coords.longitude;
              loc = new google.maps.LatLng(lat,lon);
              Gmaps.map.serviceObject.panTo(loc);
              Gmaps.map.serviceObject.setZoom(15);
              var cross = new google.maps.Marker({
                icon: '/cross.png',
                position: new google.maps.LatLng(lat,lon), 
                map: Gmaps.map.serviceObject,
                draggable: false,
              });
          },function(error){
            //use error.code to determine what went wrong
          });
        }

        if(!navigator.geolocation){
          $('recenter_button').hide();
        }
        navigator.geolocation.getCurrentPosition(function(position){},function(error){
          $('recenter_button').hide();
        });

        // see: https://developers.google.com/maps/documentation/javascript/geocoding 
        geocoder = new google.maps.Geocoder();
        function recenter_map_to_address() {
          geocoder.geocode( { 'address': $("address").value }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
              Gmaps.map.serviceObject.panTo(results[0].geometry.location);
              Gmaps.map.serviceObject.setZoom(15);
              var cross = new google.maps.Marker({
                icon: '/cross.png',
                position: results[0].geometry.location, 
                map: Gmaps.map.serviceObject,
                draggable: false,
              });
            } else {
              alert("Geocode was not successful for the following reason: " + status);
            }
          });
        }

        var markersArray = [];
        var labelsArray = [];
	var boundMarkersArray = [];
        
        Gmaps.map.callback = function() {
            google.maps.event.addListener(Gmaps.map.serviceObject, 'rightclick', function(event) {
              clearOverlays();
              placeMarker(event.latLng);
            });
            for (var i = 0; i <  Gmaps.map.markers.length; ++i) {
                var addListener = function(i){ 
                  var marker = Gmaps.map.markers[i];
                  google.maps.event.addListener(marker.serviceObject, 'click', function(){
                    new Ajax.Request('/locations/' + marker.location_id + '/infobox', {
                      onSuccess: function(response) {
                        var infowindow = new google.maps.InfoWindow({content: response.responseText });
                        if (Gmaps.map.visibleInfoWindow !== null){ Gmaps.map.visibleInfoWindow.close(); }
                        infowindow.open(Gmaps.map.serviceObject, marker.serviceObject)
                        Gmaps.map.visibleInfoWindow = infowindow;
                      }
                    });
                  });
                }
                addListener(i);
            }
            //google.maps.event.addListener(Gmaps.map.serviceObject, 'center_changed', function() {
            //  var center = Gmaps.map.serviceObject.getCenter();
            //  $("permalink").href = '<%= raw clean_fullpath %>' + 'center_lat=' + center.lat() + '&center_lng=' + center.lng();
            //});
            //<% unless @center_lat.nil? or @center_lng.nil? %>
            //var loc = new google.maps.LatLng(<%= @center_lat %>,<%= @center_lng %>);
            //Gmaps.map.serviceObject.panTo(loc);
            //<% end %>
            Gmaps.map.serviceObject.setTilt(0); 
        };

        function labelize_markers() {
              // if we're still in clustered mode, don't label
              if(Gmaps.map.serviceObject.getZoom() <= 11) return;
              var len = Gmaps.map.markers.length;
              for(var i = 0; i < len; i++){
                marker = Gmaps.map.markers[i].serviceObject;
                // only label visible markers
                if(!Gmaps.map.serviceObject.getBounds().contains(marker.getPosition())) continue;
                var mapLabel = new MapLabel({
                  text: marker.getTitle(),
                  position: marker.getPosition(),
                  map: Gmaps.map.serviceObject,
                  fontSize: 10,
                  align: 'right'
                });
                labelsArray.push(mapLabel);
                mapLabel.set('position', marker.getPosition());
		boundMarkersArray.push(marker);
                // only necessary if we want them to drag or something
                marker.bindTo('map', mapLabel);
                marker.bindTo('position', mapLabel);
              } 
        }
        function delabelize_markers() {
	      var len = boundMarkersArray.length;
              for(var i = 0; i < len; i++){
                var marker = boundMarkersArray[i]
                marker.unbind('map');
                marker.unbind('position');
                boundMarkersArray[i] = null;
              }
              boundMarkersArray = [];
              len = labelsArray.length;
              for(var i = 0; i < len; i++){
                var lab = labelsArray[i];
                lab.set('text','');
                lab.set('map',null);
                labelsArray[i] = null;
              }
              labelsArray = [];
        }
	function search_filter(){
	  var search = $('search').value;
          var len = Gmaps.map.markers.length;
          for(var i = 0; i < len; i++){
            var marker = Gmaps.map.markers[i];
            if(search == ""){
              Gmaps.map.showMarker(marker);
            }else if(marker.infowindow.getContent().search(new RegExp(search,"i")) >= 0){
              Gmaps.map.showMarker(marker);
            }else{
              Gmaps.map.hideMarker(marker);
            }
          }
	}
        // Add a marker with an open infowindow
        function placeMarker(latLng) {
            var marker = new google.maps.Marker({
                position: latLng, 
                map: Gmaps.map.serviceObject,
                draggable: true
            });
            markersArray.push(marker);
            // Set and open infowindow
            var infowindow = new google.maps.InfoWindow({
                content: '<div style="text-align: center;margin-top:1em;font-size:10pt;padding:0;font-weight:bold;">' +
                         '<a href="/locations/new?lat=' + latLng.lat() + '&lng=' + latLng.lng() + 
                         '">Click to add a source here</a><br><span class="subtext">(You can drag this thing too)</span></div>'
            });
            infowindow.open(Gmaps.map.serviceObject,marker);
            // Listen to drag & drop
            google.maps.event.addListener(marker, 'dragend', function() {
                var infowindow = new google.maps.InfoWindow({
                  content: '<div style="text-align: center;margin-top:1em;font-size:10pt;padding:0;font-weight:bold;">' +
                         '<a href="/locations/new?lat=' + this.getPosition().lat() + '&lng=' + this.getPosition().lng() + 
                         '">Click to add a source here</a><br><span class="subtext">(You can drag this thing too)</span></div>'
                });
                infowindow.open(Gmaps.map.serviceObject,marker);
            });
            google.maps.event.addListener(infowindow,'closeclick',function(){
              clearOverlays();    
            });
        }
        // Removes the overlays from the map
        function clearOverlays() {
          if (markersArray) {
            for (var i = 0; i < markersArray.length; i++ ) {
              markersArray[i].setMap(null);
            }
          }
          markersArray.length = 0;
        }
    </script>
<% end %>

<%= yield :scripts %>
<%= javascript_include_tag "maplabel" %>
